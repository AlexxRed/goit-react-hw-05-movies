{"version":3,"file":"static/js/movie-page.2742eb9d.chunk.js","mappings":"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","sources":["pages/MoviesPage/MoviesPage.styled.jsx","pages/MoviesPage/MoviesPage.jsx","services/api.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const FormContainer = styled.form`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n`;\n\n    export const FormInput = styled.input`\n    height: 30px;\n    font-size: 24px;\n    padding-left: 5px;\n    border: 1px solid rgba(33, 33, 33, 0.2);\n    border-radius: 4px;\n    outline: none;\n    cursor: pointer;\n    transition: border 250ms cubic-bezier(0.4, 0, 0.2, 1);\n    :focus {\n        border: 1px solid #2f21f3;\n    }\n`;\n\n    export const Button = styled.button`\n    height: 32px;\n    font-size: 16px;\n    cursor: pointer;\n    color: white;\n    background-color: #2f21f3;\n    border-radius: 4px;\n    border: 1px solid transparent;\n    box-shadow: 0px 4px 4px rgb(0 0 0 / 15%);\n    transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n    margin-left: 10px;\n    :hover,\n    :focus {\n        background-color: #7068d8;\n    }\n`;\n\nexport const ListItem = styled.li`\n    padding: 5px 0px;\n    height: 471px;\n    cursor: pointer;\n    margin: 0;\n    border-radius: 5px;\n    :hover,\n    :focus {\n        box-shadow: 0 1px 4px rgba(255, 107, 1, 1), -23px 0 20px -23px rgba(255, 107, 1, 0.8),\n        23px 0 20px -23px rgba(255, 107, 1, 0.8), 0 0 40px rgba(255, 107, 1, 0.1) inset;\n        transform: scale(1.05);\n    }\n`;\n\nexport const MoviesList = styled.ul`\n    display: grid;\n    grid-template-columns: repeat(4, 1fr);\n    grid-column-gap: 15px;\n    grid-row-gap: 15px;\n`;\n\n","import { useState, useEffect } from 'react';\nimport { FormContainer, FormInput, Button, MoviesList, ListItem } from './MoviesPage.styled';\nimport { useSearchParams, Link, useLocation } from 'react-router-dom';\nimport { Loader } from \"components/Loader/Loader\"\nimport *as API from \"../../services/api\";\nimport  notPoster  from \"images/no-poster-available.jpg\";\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nexport default function MoviesPage() {\n    const [inputValue, setInputValue] = useState('');\n    const [movies, setMovies] = useState(null);\n    const [query, setQuery] = useSearchParams();\n    const location = useLocation();\n\n    useEffect(() => {\n        if (!query.get('query')) {\n        setMovies(null);\n        return;\n        }\n\n        const getData = async () => {\n        const results = await API.getSearchMovies(query.get('query'));\n        setMovies(results);\n        if (results.length === 0) {\n            Notify.info('Movies is not found');\n        }\n        };\n        getData();\n    }, [query]);\n\n    const handleSearchChange = e => {\n        setInputValue(e.currentTarget.value);\n    };\n\n    const handleSubmit = e => {\n        e.preventDefault();\n        if (!inputValue) {\n            Notify.info('Please enter film name');\n        }\n        setQuery({ query: inputValue });\n        setInputValue('');\n    };\n\n    return (\n        <>\n        <FormContainer autoComplete=\"off\" onSubmit={handleSubmit}>\n            <FormInput\n            type=\"text\"\n            value={inputValue}\n            onChange={handleSearchChange}\n            />\n            <Button type=\"submit\">Search</Button>\n        </FormContainer>\n        {!movies && query.get('query') && <Loader />}\n        {movies && (\n            <MoviesList>\n            {movies.map(movie => {\n                return (\n                <ListItem key={movie.id}>\n                    <Link\n                    to={`${movie.id}`}\n                            state={{ from: location }}>\n                            {movie.poster_path?\n                                        (<img src={`https://image.tmdb.org/t/p/w300${movie.poster_path}`} alt={movie.title} width={300} height={450} />) :\n                                (<img src={notPoster} alt=\"Uknown\"  width={300} height={450}/>)}\n                    {movie.title ?? movie.name}\n                    </Link>\n                </ListItem>\n                );\n            })}\n            </MoviesList>\n        )}\n        </>\n    );\n}","import { Link } from \"react-router-dom\";\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport axios from 'axios';\n\nconst API_KEY = '07d8f6bb3fbc4adc66305e6fcf7baef2';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nexport const getTrendingMovies = async () => {\n    try {\n        const response = await axios.get(`/trending/all/day?api_key=${API_KEY}`);\n        return response.data.results;\n    } catch (error) {\n        Notify.info(`${error.code}`);\n    };\n};\n\nexport const getSearchMovies = async searchQuery => {\n    try {\n        const response = await axios.get(`/search/movie?api_key=${API_KEY}&query=${searchQuery}`);\n        return response.data.results;\n    } catch (error) {\n        Notify.info(`${error.code}`);\n    };\n};\n\nexport const getMovieDetails = async id => {\n    try {\n        const response = await axios.get(`/movie/${id}?api_key=${API_KEY}`);\n        return response.data;\n    } catch (error) {\n        Notify.info(`${error.code}`);\n    };\n};\n\nexport const getMovieCredits = async id => {\n    try {\n        const response = await axios.get(`/movie/${id}/credits?api_key=${API_KEY}`);\n        return response.data.cast;\n    } catch (error) {\n        Notify.info(`${error.code}`);\n    };\n};\n\nexport const getMovieReviews = async id => {\n    try {\n        const response = await axios.get(`/movie/${id}/reviews?api_key=${API_KEY}`);\n        return response.data.results;\n    } catch (error) {\n        Notify.info(`${error.code}`);\n                <p>Sorry, page not found :( <Link to=\"/\">Please go to main page</Link></p>\n    };\n};\n\n"],"names":["FormContainer","styled","FormInput","Button","ListItem","MoviesList","MoviesPage","useState","inputValue","setInputValue","movies","setMovies","useSearchParams","query","setQuery","location","useLocation","useEffect","get","getData","API","results","length","Notify","autoComplete","onSubmit","e","preventDefault","type","value","onChange","currentTarget","Loader","map","movie","to","id","state","from","poster_path","src","alt","title","width","height","notPoster","name","API_KEY","axios","getTrendingMovies","response","data","code","getSearchMovies","searchQuery","getMovieDetails","getMovieCredits","cast","getMovieReviews"],"sourceRoot":""}
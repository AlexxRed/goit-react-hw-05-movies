{"version":3,"file":"static/js/cast.9d2b9521.chunk.js","mappings":"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","sources":["components/Loader/Loader.jsx","pages/CastPage/CastPage.jsx","pages/MovieDetailsPage/MoviesDetailsPage.styled.jsx","pages/MovieDetailsPage/MovieDetailsPage.jsx","pages/MoviesPage/MoviesPage.styled.jsx","pages/MoviesPage/MoviesPage.jsx","services/api.js"],"sourcesContent":["// import { LoadingText } from './Loader.styled';\nimport {Watch} from 'react-loader-spinner'\n\nexport const Loader = () => {\n    return (\n        <Watch\n        color=\"#0c595c\"\n        height={80}\n        width={80}\n        wrapperStyle={{ margin: '0 auto' }}\n        />\n    )\n}\n\n    // return <LoadingText>loading...</LoadingText>","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Loader } from \"components/Loader/Loader\"\nimport *as API from \"../../services/api\";\n\nexport default function CastPage() {\n    const [cast, setCast] = useState(null);\n    const { movieId } = useParams();\n\n    useEffect(() => {\n        const getCast = async () => {\n            const result = await API.getMovieCredits(movieId)\n            setCast(result)\n        }\n        getCast()\n    }, [movieId]);\n\n    return (\n        <>\n            {!cast && <Loader />}\n\n            {cast?.length === 0 && (<p>We don't have any casters info</p>)}\n\n            {cast?.length > 0 && (\n                <ul>\n                {cast.map(item => {\n                    return (\n                        <li key={item.id}>\n                            <img src={`https://image.tmdb.org/t/p/w300${item.profile_path}`} alt=\"\" />\n                            <p>{item.name}</p>\n                            <p><b>Character:</b> {item.character}</p>\n                        </li>\n                    )\n                })}\n            </ul>\n            )}\n        </>\n    )\n}; ","import styled from '@emotion/styled';\n\nexport const MovieContainer = styled.div`\n    display: flex;\n    margin-top: 10px;\n    padding-bottom: 20px;\n    border-bottom: 1px solid #2a363b;\n`;\n\nexport const MovieInfo = styled.div`\n    margin-left: 20px;\n`;\n\nexport const MovieAdditionalInfo = styled.ul`\n    padding-bottom: 20px;\n    border-bottom: 1px solid #2a363b;\n`;\nexport const AdditionalInfoItem = styled.li`\n    margin-bottom: 20px;\n`;","import { useState, useEffect } from \"react\";\nimport { useParams, NavLink, Outlet } from \"react-router-dom\";\nimport { Loader } from \"components/Loader/Loader\"\nimport { MovieContainer, MovieInfo, MovieAdditionalInfo, AdditionalInfoItem } from \"./MoviesDetailsPage.styled\";\nimport  notPoster  from \"images/no-poster-available.jpg\";\nimport *as API from \"../../services/api\";\n\nexport default function MovieDetailsPage() {\n    const [movie, setMovie] = useState(null);\n    const { movieId } = useParams();\n\n    useEffect(() => {\n    const getData = async () => {\n        const results = await API.getMovieDetails(movieId);\n        setMovie(results);\n        };\n        \n        getData();\n    }, [movieId]);\n    \n    return (\n        <>\n            {!movie && <Loader/>}\n            {movie && (\n                <>\n                    <MovieContainer>\n                        {movie.poster_path?\n                            (<img src={`https://image.tmdb.org/t/p/w300${movie.poster_path}`} alt={movie.original_title} />) :\n                            (<img src={notPoster} alt=\"Uknown\" />)}\n                        <MovieInfo>\n                            <h1>{movie.title}({movie?.release_date?.split('-')[0]})</h1>\n                            <p>User Score: {movie.vote_average * 10}%</p>\n                            <h2>Overview</h2>\n                            <p>{movie.overview}</p>\n                            <h2>Genres</h2>\n                            <p>{movie.genres.map(genre => <span key={genre.id}>{genre.name} </span>\n                            )}</p>\n                        </MovieInfo>\n                    </MovieContainer>\n                    <p>Additional information</p>\n                    <MovieAdditionalInfo>\n                        <AdditionalInfoItem>\n                            <NavLink to=\"cast\">Cast</NavLink>\n                        </AdditionalInfoItem>\n                        <AdditionalInfoItem>\n                            <NavLink to=\"reviews\">Reviews</NavLink>\n                        </AdditionalInfoItem>\n                        </MovieAdditionalInfo>\n                        <Outlet />\n                </>\n            )}\n        </>\n    ) \n    \n}; ","import styled from '@emotion/styled';\n\nexport const FormContainer = styled.form`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n`;\n\n    export const FormInput = styled.input`\n    height: 30px;\n    font-size: 24px;\n    padding-left: 5px;\n    border: 1px solid rgba(33, 33, 33, 0.2);\n    border-radius: 4px;\n    outline: none;\n    cursor: pointer;\n    transition: border 250ms cubic-bezier(0.4, 0, 0.2, 1);\n    :focus {\n        border: 1px solid #2f21f3;\n    }\n`;\n\n    export const Button = styled.button`\n    height: 32px;\n    font-size: 16px;\n    cursor: pointer;\n    color: white;\n    background-color: #2f21f3;\n    border-radius: 4px;\n    border: 1px solid transparent;\n    box-shadow: 0px 4px 4px rgb(0 0 0 / 15%);\n    transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n    margin-left: 10px;\n    :hover,\n    :focus {\n        background-color: #7068d8;\n    }\n`;\n\nexport const ListItem = styled.li`\n    padding: 5px 0px;\n`;","import { useState, useEffect } from 'react';\nimport { FormContainer, FormInput, Button } from './MoviesPage.styled';\nimport { useSearchParams, Link, useLocation } from 'react-router-dom';\nimport { Loader } from \"components/Loader/Loader\"\nimport *as API from \"../../services/api\";\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nexport default function MoviesPage() {\n    const [inputValue, setInputValue] = useState('');\n    const [movies, setMovies] = useState(null);\n    const [query, setQuery] = useSearchParams();\n    const location = useLocation();\n\n    useEffect(() => {\n        if (!query.get('query')) {\n        setMovies(null);\n        return;\n        }\n\n        const getData = async () => {\n        const results = await API.getSearchMovies(query.get('query'));\n        setMovies(results);\n        if (results.length === 0) {\n            Notify.info('Movies is not found');\n        }\n        };\n        getData();\n    }, [query]);\n\n    const handleSearchChange = e => {\n        setInputValue(e.currentTarget.value);\n    };\n\n    const handleSubmit = e => {\n        e.preventDefault();\n        if (!inputValue) {\n            Notify.info('Please enter film name');\n        }\n        setQuery({ query: inputValue });\n        setInputValue('');\n    };\n\n    return (\n        <>\n        <FormContainer autoComplete=\"off\" onSubmit={handleSubmit}>\n            <FormInput\n            type=\"text\"\n            value={inputValue}\n            onChange={handleSearchChange}\n            />\n            <Button type=\"submit\">Search</Button>\n        </FormContainer>\n        {!movies && query.get('query') && <Loader />}\n        {movies && (\n            <ul>\n            {movies.map(movie => {\n                return (\n                <li key={movie.id}>\n                    <Link\n                    to={`${movie.id}`}\n                    state={{\n                        from: location,\n                    }}\n                    >\n                    {movie.title ?? movie.name}\n                    </Link>\n                </li>\n                );\n            })}\n            </ul>\n        )}\n        </>\n    );\n}","import { Link } from \"react-router-dom\";\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport axios from 'axios';\n\nconst API_KEY = '07d8f6bb3fbc4adc66305e6fcf7baef2';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nexport const getTrendingMovies = async () => {\n    try {\n        const response = await axios.get(`/trending/all/day?api_key=${API_KEY}`);\n        return response.data.results;\n    } catch (error) {\n        Notify.info(`${error.code}`);\n        <p>Sorry, page not found :( <Link to=\"/\">Please go to main page</Link></p>\n    };\n};\n\nexport const getSearchMovies = async searchQuery => {\n    try {\n        const response = await axios.get(`/search/movie?api_key=${API_KEY}&query=${searchQuery}`);\n        return response.data.results;\n    } catch (error) {\n        Notify.info(`${error.code}`);\n    };\n};\n\nexport const getMovieDetails = async id => {\n    try {\n        const response = await axios.get(`/movie/${id}?api_key=${API_KEY}`);\n        return response.data;\n    } catch (error) {\n        Notify.info(`${error.code}`);\n    };\n};\n\nexport const getMovieCredits = async id => {\n    try {\n        const response = await axios.get(`/movie/${id}/credits?api_key=${API_KEY}`);\n        return response.data.cast;\n    } catch (error) {\n        Notify.info(`${error.code}`);\n    };\n};\n\nexport const getMovieReviews = async id => {\n    try {\n        const response = await axios.get(`/movie/${id}/reviews?api_key=${API_KEY}`);\n        return response.data.results;\n    } catch (error) {\n        Notify.info(`${error.code}`);\n    };\n};\n\n"],"names":["Loader","color","height","width","wrapperStyle","margin","CastPage","useState","cast","setCast","movieId","useParams","useEffect","getCast","API","result","length","map","item","src","profile_path","alt","name","character","id","MovieContainer","styled","MovieInfo","MovieAdditionalInfo","AdditionalInfoItem","MovieDetailsPage","movie","setMovie","getData","results","poster_path","original_title","notPoster","title","release_date","split","vote_average","overview","genres","genre","to","FormContainer","FormInput","Button","MoviesPage","inputValue","setInputValue","movies","setMovies","useSearchParams","query","setQuery","location","useLocation","get","Notify","autoComplete","onSubmit","e","preventDefault","type","value","onChange","currentTarget","state","from","API_KEY","axios","getTrendingMovies","response","data","code","getSearchMovies","searchQuery","getMovieDetails","getMovieCredits","getMovieReviews"],"sourceRoot":""}
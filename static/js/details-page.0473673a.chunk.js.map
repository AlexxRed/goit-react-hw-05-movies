{"version":3,"file":"static/js/details-page.0473673a.chunk.js","mappings":"gSAEaA,EAAiBC,EAAAA,EAAAA,IAAH,qIAOdC,EAAYD,EAAAA,EAAAA,IAAH,gDAITE,EAAsBF,EAAAA,EAAAA,GAAH,0FAInBG,EAAqBH,EAAAA,EAAAA,GAAH,kD,6BCVhB,SAASI,IAAoB,IAAD,EACvC,GAA0BC,EAAAA,EAAAA,UAAS,MAAnC,eAAOC,EAAP,KAAcC,EAAd,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAWR,OATAE,EAAAA,EAAAA,YAAU,WACV,IAAMC,EAAO,mCAAG,oGACUC,EAAAA,GAAoBJ,GAD9B,OACNK,EADM,OAEZN,EAASM,GAFG,2CAAH,qDAKTF,MACD,CAACH,KAGA,iCACMF,IAAS,SAACQ,EAAA,EAAD,IACVR,IACG,iCACI,UAACP,EAAD,WACKO,EAAMS,aACF,gBAAKC,IAAG,yCAAoCV,EAAMS,aAAeE,IAAKX,EAAMY,kBAC5E,gBAAKF,IAAKG,EAAWF,IAAI,YAC9B,UAAChB,EAAD,YACI,0BAAKK,EAAMc,MAAX,WAAmBd,QAAnB,IAAmBA,GAAnB,UAAmBA,EAAOe,oBAA1B,aAAmB,EAAqBC,MAAM,KAAK,GAAnD,QACA,wCAAqC,GAArBhB,EAAMiB,aAAtB,QACA,sCACA,uBAAIjB,EAAMkB,YACV,oCACA,uBAAIlB,EAAMmB,OAAOC,KAAI,SAAAC,GAAK,OAAI,4BAAsBA,EAAMC,KAA5B,MAAWD,EAAME,gBAIvD,mDACA,UAAC3B,EAAD,YACI,SAACC,EAAD,WACI,SAAC,KAAD,CAAS2B,GAAG,OAAZ,qBAEJ,SAAC3B,EAAD,WACI,SAAC,KAAD,CAAS2B,GAAG,UAAZ,2BAGJ,SAAC,KAAD,Y,6NC5ClBC,G,OAAU,oCAChBC,IAAAA,SAAAA,QAAyB,+BAElB,IAAMC,EAAiB,mCAAG,6GAEFD,IAAAA,IAAA,oCAAuCD,IAFrC,cAEnBG,EAFmB,yBAGlBA,EAASC,KAAKtB,SAHI,gCAKzBuB,EAAAA,OAAAA,KAAA,UAAe,KAAMC,OACQ,KANJ,iEAAH,qDAUjBC,EAAe,mCAAG,WAAMC,GAAN,gGAEAP,IAAAA,IAAA,gCAAmCD,EAAnC,kBAAoDQ,IAFpD,cAEjBL,EAFiB,yBAGhBA,EAASC,KAAKtB,SAHE,gCAKvBuB,EAAAA,OAAAA,KAAA,UAAe,KAAMC,OALE,iEAAH,sDASfG,EAAe,mCAAG,WAAMX,GAAN,gGAEAG,IAAAA,IAAA,iBAAoBH,EAApB,oBAAkCE,IAFlC,cAEjBG,EAFiB,yBAGhBA,EAASC,MAHO,gCAKvBC,EAAAA,OAAAA,KAAA,UAAe,KAAMC,OALE,iEAAH,sDASfI,EAAe,mCAAG,WAAMZ,GAAN,gGAEAG,IAAAA,IAAA,iBAAoBH,EAApB,4BAA0CE,IAF1C,cAEjBG,EAFiB,yBAGhBA,EAASC,KAAKO,MAHE,gCAKvBN,EAAAA,OAAAA,KAAA,UAAe,KAAMC,OALE,iEAAH,sDASfM,EAAe,mCAAG,WAAMd,GAAN,gGAEAG,IAAAA,IAAA,iBAAoBH,EAApB,4BAA0CE,IAF1C,cAEjBG,EAFiB,yBAGhBA,EAASC,KAAKtB,SAHE,gCAKvBuB,EAAAA,OAAAA,KAAA,UAAe,KAAMC,OALE,iEAAH,uD","sources":["pages/MovieDetailsPage/MoviesDetailsPage.styled.jsx","pages/MovieDetailsPage/MovieDetailsPage.jsx","services/api.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const MovieContainer = styled.div`\n    display: flex;\n    margin-top: 10px;\n    padding-bottom: 20px;\n    border-bottom: 1px solid #2a363b;\n`;\n\nexport const MovieInfo = styled.div`\n    margin-left: 20px;\n`;\n\nexport const MovieAdditionalInfo = styled.ul`\n    padding-bottom: 20px;\n    border-bottom: 1px solid #2a363b;\n`;\nexport const AdditionalInfoItem = styled.li`\n    margin-bottom: 20px;\n`;","import { useState, useEffect } from \"react\";\nimport { useParams, NavLink, Outlet } from \"react-router-dom\";\nimport { Loader } from \"components/Loader/Loader\";\nimport { MovieContainer, MovieInfo, MovieAdditionalInfo, AdditionalInfoItem } from \"./MoviesDetailsPage.styled\";\nimport  notPoster  from \"images/no-poster-available.jpg\";\nimport *as API from \"../../services/api\";\n\nexport default function MovieDetailsPage() {\n    const [movie, setMovie] = useState(null);\n    const { movieId } = useParams();\n\n    useEffect(() => {\n    const getData = async () => {\n        const results = await API.getMovieDetails(movieId);\n        setMovie(results);\n        };\n        \n        getData();\n    }, [movieId]);\n    \n    return (\n        <>\n            {!movie && <Loader/>}\n            {movie && (\n                <>\n                    <MovieContainer>\n                        {movie.poster_path?\n                            (<img src={`https://image.tmdb.org/t/p/w300${movie.poster_path}`} alt={movie.original_title} />) :\n                            (<img src={notPoster} alt=\"Uknown\" />)}\n                        <MovieInfo>\n                            <h1>{movie.title}({movie?.release_date?.split('-')[0]})</h1>\n                            <p>User Score: {movie.vote_average * 10}%</p>\n                            <h2>Overview</h2>\n                            <p>{movie.overview}</p>\n                            <h2>Genres</h2>\n                            <p>{movie.genres.map(genre => <span key={genre.id}>{genre.name} </span>\n                            )}</p>\n                        </MovieInfo>\n                    </MovieContainer>\n                    <p>Additional information</p>\n                    <MovieAdditionalInfo>\n                        <AdditionalInfoItem>\n                            <NavLink to=\"cast\">Cast</NavLink>\n                        </AdditionalInfoItem>\n                        <AdditionalInfoItem>\n                            <NavLink to=\"reviews\">Reviews</NavLink>\n                        </AdditionalInfoItem>\n                        </MovieAdditionalInfo>\n                        <Outlet />\n                </>\n            )}\n        </>\n    ) \n    \n}; ","import { Link } from \"react-router-dom\";\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport axios from 'axios';\n\nconst API_KEY = '07d8f6bb3fbc4adc66305e6fcf7baef2';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nexport const getTrendingMovies = async () => {\n    try {\n        const response = await axios.get(`/trending/all/day?api_key=${API_KEY}`);\n        return response.data.results;\n    } catch (error) {\n        Notify.info(`${error.code}`);\n        <p>Sorry, page not found :( <Link to=\"/\">Please go to main page</Link></p>\n    };\n};\n\nexport const getSearchMovies = async searchQuery => {\n    try {\n        const response = await axios.get(`/search/movie?api_key=${API_KEY}&query=${searchQuery}`);\n        return response.data.results;\n    } catch (error) {\n        Notify.info(`${error.code}`);\n    };\n};\n\nexport const getMovieDetails = async id => {\n    try {\n        const response = await axios.get(`/movie/${id}?api_key=${API_KEY}`);\n        return response.data;\n    } catch (error) {\n        Notify.info(`${error.code}`);\n    };\n};\n\nexport const getMovieCredits = async id => {\n    try {\n        const response = await axios.get(`/movie/${id}/credits?api_key=${API_KEY}`);\n        return response.data.cast;\n    } catch (error) {\n        Notify.info(`${error.code}`);\n    };\n};\n\nexport const getMovieReviews = async id => {\n    try {\n        const response = await axios.get(`/movie/${id}/reviews?api_key=${API_KEY}`);\n        return response.data.results;\n    } catch (error) {\n        Notify.info(`${error.code}`);\n    };\n};\n\n"],"names":["MovieContainer","styled","MovieInfo","MovieAdditionalInfo","AdditionalInfoItem","MovieDetailsPage","useState","movie","setMovie","movieId","useParams","useEffect","getData","API","results","Loader","poster_path","src","alt","original_title","notPoster","title","release_date","split","vote_average","overview","genres","map","genre","name","id","to","API_KEY","axios","getTrendingMovies","response","data","Notify","code","getSearchMovies","searchQuery","getMovieDetails","getMovieCredits","cast","getMovieReviews"],"sourceRoot":""}